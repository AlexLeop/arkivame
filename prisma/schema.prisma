generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// ================================
// CORE MULTITENANT STRUCTURE
// ================================

model Organization {
  id         String    @id @default(cuid())
  name       String
  slug       String    @unique // For subdomain/routing
  subdomain  String?   @unique
  domain     String?   @unique
  plan       Plan      @default(STARTER)
  planLimits Json      @default("{}")
  settings   Json      @default("{}")
  status     OrgStatus @default(ACTIVE)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  users         OrganizationUser[]
  knowledgeBase KnowledgeItem[]
  tags          Tag[]
  integrations  Integration[]
  auditLogs     AuditLog[]
  subscription  Subscription?
  invitations   Invitation[]

  @@map("organizations")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  name        String?
  firstName   String?
  lastName    String?
  password    String
  role        GlobalRole @default(USER)
  isActive    Boolean    @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Multitenant relationships
  organizations OrganizationUser[]

  // Activity tracking
  createdKnowledge  KnowledgeItem[] @relation("KnowledgeCreator")
  archivedKnowledge KnowledgeItem[] @relation("KnowledgeArchiver")
  auditLogs         AuditLog[]

  // Next-Auth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model OrganizationUser {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole  @default(MEMBER)
  permissions    Json     @default("[]")
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_users")
}

// ================================
// KNOWLEDGE MANAGEMENT SYSTEM
// ================================

model KnowledgeItem {
  id             String @id @default(cuid())
  organizationId String // Multitenant isolation

  // Core content
  title       String
  content     Json // Array of message objects from thread
  summary     String? // AI-generated summary
  actionItems Json? // AI-generated action items
  topics      Json? // AI-generated topics
  embedding   Json? // Store the generated embedding as JSON
  threadId    String? // Original Slack/Teams thread ID
  channelId   String?
  channelName String?

  // Metadata
  sourceType     SourceType @default(MANUAL)
  sourceMetadata Json       @default("{}")

  // Authorship
  createdById       String
  archivedById      String? // User who archived it
  rootMessageAuthor String? // Original thread author

  // Organization & Tags
  tags TagAssignment[]

  // Analytics
  viewCount    Int       @default(0)
  searchCount  Int       @default(0)
  lastViewedAt DateTime?

  // Status
  status   ContentStatus @default(PUBLISHED)
  isPublic Boolean       @default(false)

  // Timestamps
  originalTimestamp DateTime? // When original thread was created
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User         @relation("KnowledgeCreator", fields: [createdById], references: [id])
  archiver     User?        @relation("KnowledgeArchiver", fields: [archivedById], references: [id])

  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([createdById])
  @@index([threadId])
  @@map("knowledge_items")
}

// ================================
// ADVANCED TAGGING SYSTEM
// ================================

model Tag {
  id             String @id @default(cuid())
  organizationId String // Multitenant isolation

  // Hierarchical structure
  name        String
  slug        String
  description String?
  color       String  @default("#2ED9C3")
  icon        String?

  // Hierarchy
  parentId String?
  level    Int     @default(0)
  path     String  @default("") // For efficient hierarchy queries

  // Auto-suggestion & intelligence
  isAutoSuggested Boolean @default(false)
  usageCount      Int     @default(0)

  // Settings
  isActive Boolean @default(true)
  isSystem Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent       Tag?            @relation("TagHierarchy", fields: [parentId], references: [id])
  children     Tag[]           @relation("TagHierarchy")
  assignments  TagAssignment[]

  @@unique([organizationId, slug])
  @@index([organizationId, parentId])
  @@map("tags")
}

model TagAssignment {
  id              String   @id @default(cuid())
  knowledgeItemId String
  tagId           String
  assignedAt      DateTime @default(now())
  assignedBy      String // User ID who assigned
  isAutoAssigned  Boolean  @default(false)
  confidence      Float? // For AI auto-assignment

  knowledgeItem KnowledgeItem @relation(fields: [knowledgeItemId], references: [id], onDelete: Cascade)
  tag           Tag           @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([knowledgeItemId, tagId])
  @@map("tag_assignments")
}

// ================================
// INTEGRATIONS & EXTERNAL SERVICES
// ================================

model Integration {
  id             String @id @default(cuid())
  organizationId String

  type        IntegrationType
  name        String
  config      Json            @default("{}") // NOTE: Credentials here must be encrypted in the application layer before saving.
  credentials Json            @default("{}") // Encrypted

  isActive   Boolean   @default(true)
  lastSyncAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@map("integrations")
}

// ================================
// AUDIT & ANALYTICS
// ================================

model AuditLog {
  id             String  @id @default(cuid())
  organizationId String? // Null for system-wide logs
  userId         String?

  action   String
  entity   String // Resource type (user, knowledge, tag, etc)
  entityId String? // Resource ID

  // Event details
  details   Json    @default("{}")
  ipAddress String?
  userAgent String?

  // Context
  level  LogLevel @default(INFO)
  source String   @default("web")

  timestamp DateTime @default(now())

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?         @relation(fields: [userId], references: [id])

  @@index([organizationId, timestamp])
  @@index([timestamp])
  @@index([userId])
  @@map("audit_logs")
}

// ================================
// SAVED FILTERS & PREFERENCES
// ================================

model SavedFilter {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  name         String
  description  String?
  filterConfig Json // Stores filter criteria
  isPublic     Boolean @default(false)
  isDefault    Boolean @default(false)

  usageCount Int       @default(0)
  lastUsedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("saved_filters")
}

// ================================
// STRIPE BILLING & SUBSCRIPTIONS
// ================================

model Subscription {
  id             String @id @default(cuid())
  organizationId String @unique

  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime

  plan   Plan
  status SubscriptionStatus

  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  usageNotificationSentAt DateTime?

  @@map("subscriptions")
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  role           OrgRole      @default(MEMBER)
  token          String       @unique
  expiresAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([email, organizationId])
  @@map("invitations")
}

model PaymentHistory {
  id             String @id @default(cuid())
  organizationId String

  stripePaymentIntentId String        @unique
  amount                Int // Amount in cents
  currency              String        @default("usd")
  status                PaymentStatus

  description String?
  receiptUrl  String?

  createdAt DateTime @default(now())

  @@index([organizationId])
  @@map("payment_history")
}

// ================================
// ANALYTICS & ADVANCED METRICS
// ================================

model AnalyticsEvent {
  id             String  @id @default(cuid())
  organizationId String?
  userId         String?
  sessionId      String?

  event      String // e.g., 'knowledge_archived', 'search_performed'
  properties Json   @default("{}")

  // Context
  userAgent String?
  ipAddress String?
  referrer  String?

  timestamp DateTime @default(now())

  @@index([organizationId, event, timestamp])
  @@index([timestamp])
  @@map("analytics_events")
}

model SearchQuery {
  id             String  @id @default(cuid())
  organizationId String
  userId         String?

  query         String
  resultsCount  Int
  clickedResult String? // Knowledge item ID that was clicked

  // Query context
  filters Json    @default("{}")
  sortBy  String?

  timestamp DateTime @default(now())

  @@index([organizationId, timestamp])
  @@index([userId])
  @@map("search_queries")
}

// ================================
// WEBHOOKS FOR INTEGRATIONS
// ================================

model WebhookEndpoint {
  id             String @id @default(cuid())
  organizationId String

  url    String
  secret String // For webhook signature verification
  events Json   @default("[]") // Array of events to listen to

  isActive      Boolean   @default(true)
  lastTriggered DateTime?
  failureCount  Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_endpoints")
}

model WebhookDelivery {
  id         String @id @default(cuid())
  endpointId String

  eventType String
  payload   Json
  response  Json?

  status       WebhookStatus
  httpStatus   Int?
  errorMessage String?

  attemptCount Int       @default(1)
  nextRetryAt  DateTime?

  createdAt DateTime @default(now())

  @@index([endpointId, status])
  @@map("webhook_deliveries")
}

// ================================
// NEXT-AUTH TABLES
// ================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// ENUMS
// ================================

enum Plan {
  FREE
  STARTER
  BUSINESS
  ENTERPRISE
}

enum OrgStatus {
  ACTIVE
  SUSPENDED
  PENDING
  CANCELLED
}

enum GlobalRole {
  SUPER_ADMIN // System owner
  ADMIN // Can manage multiple orgs
  USER // Regular user
}

enum OrgRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  VIEWER
}

enum SourceType {
  SLACK
  TEAMS
  MANUAL
  API
  IMPORT
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum IntegrationType {
  // Input Integrations (Captura de conhecimento)
  SLACK
  TEAMS
  NOTION
  DISCORD
  GOOGLE_CHAT
  MATTERMOST
  ROCKET_CHAT
  ZULIP
  TELEGRAM

  // Output Integrations (Envio para wikis)
  NOTION_OUT
  CONFLUENCE
  CODA
  CLICKUP_DOCS
  GOOGLE_DOCS
  DROPBOX_PAPER
  GURU
  SLAP
  BOOKSTACK
  GITHUB_WIKI

  // Other Integrations
  JIRA
  WEBHOOK
  STRIPE
  OPENAI
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
  CANCELED
  REQUIRES_ACTION
}

enum WebhookStatus {
  PENDING
  DELIVERED
  FAILED
  RETRY
}
